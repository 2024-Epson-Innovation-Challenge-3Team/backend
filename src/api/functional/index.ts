/**
 * @packageDocumentation
 * @module api.functional
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { UserEntity } from "../../entities/user.entity";

export * as aa from "./aa";
export * as insertIpnitValue from "./insertIpnitValue";

/**
 * @controller UserController.sayHello
 * @path GET /sayHello
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function sayHello(
  connection: IConnection,
): Promise<sayHello.Output> {
  return !!connection.simulate
    ? sayHello.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...sayHello.METADATA,
        path: sayHello.path(),
      });
}
export namespace sayHello {
  export type Output = Primitive<Array<UserEntity>>;

  export const METADATA = {
    method: "GET",
    path: "/sayHello",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/sayHello";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<UserEntity>>> =>
    typia.random<Primitive<Array<UserEntity>>>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
