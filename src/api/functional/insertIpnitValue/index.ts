/**
 * @packageDocumentation
 * @module api.functional.insertIpnitValue
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { UserEntity } from "../../../entities/user.entity";

/**
 * @controller UserController.insertInitValue
 * @path GET /insertIpnitValue
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function insertInitValue(
  connection: IConnection,
): Promise<insertInitValue.Output> {
  return !!connection.simulate
    ? insertInitValue.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...insertInitValue.METADATA,
        path: insertInitValue.path(),
      });
}
export namespace insertInitValue {
  export type Output = Primitive<UserEntity>;

  export const METADATA = {
    method: "GET",
    path: "/insertIpnitValue",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/insertIpnitValue";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<UserEntity>> => typia.random<Primitive<UserEntity>>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
